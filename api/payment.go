// Generated by api-gen tool. Do not edit here but edit in api/api-template.go.tmpl 
package api

import (
	"fmt"
	"net/http"

	u "github.com/sunshine69/golang-tools/utils"

	"github.com/sunshine69/rental-management/model"
)

func CreatePayment(w http.ResponseWriter, r *http.Request) {
	payment := ParseJSON[model.Payment](r)
	payment.Save()
}

func UpdatePayment(w http.ResponseWriter, r *http.Request) {
	o := ParseJSON[model.Payment](r)
	if id := ParseID(r); id != 0 {
		o.Id = id
		o.Save()
		fmt.Fprint(w, `{"status": "OK", "msg": "Payment updated"}`)
		return
	} else {    
		if o.Account_id == 0  || o.Pay_date == 0  {
			fmt.Fprint(w, `{"status": "ERROR", "msg": "Payment no key value not provided"}`)
			return
		} else {
			o.Save()
			fmt.Fprint(w, `{"status": "OK", "msg": "Payment updated"}`)
			return
		}
	}
}

func DeletePayment(w http.ResponseWriter, r *http.Request) {
	if id := ParseID(r); id != 0 {
		model.DeletePaymentByID(id)
		fmt.Fprint(w, `{"status": "OK", "msg": "Payment deleted"}`)
		return
	} else {
		payment := ParseJSON[model.Payment](r)
		if payment.Id != 0 {
			payment.Delete()
			fmt.Fprint(w, `{"status": "OK", "msg": "Payment deleted"}`)
		}
	}
}

func GetPayment(w http.ResponseWriter, r *http.Request) {
	if id := ParseID(r); id == 0 {
		if where := r.PathValue("where"); where != "" {
			o := model.Payment{Where: where}
			os := o.Search()
			fmt.Fprint(w, u.JsonDump(os, ""))
			return
		} else {
			os := []model.Payment{}
			model.DB.Select(&os, `SELECT * FROM payment ORDER BY id LIMIT 200`)
			fmt.Fprint(w, u.JsonDump(os, ""))
			return
		}
	} else {
		o := model.GetPaymentByID(id)
		fmt.Fprint(w, u.JsonDump(*o, ""))
		return
	}
}

func PaymentRouteRegister(mux *http.ServeMux, PathBase string) {
	mux.HandleFunc("POST "+PathBase+"/payment", CreatePayment)
	mux.HandleFunc("PUT "+PathBase+"/payment/{id}{$}", UpdatePayment)
	mux.HandleFunc("PUT "+PathBase+"/payment", UpdatePayment)
	mux.HandleFunc("DELETE "+PathBase+"/payment/{id}{$}", DeletePayment)
	mux.HandleFunc("DELETE "+PathBase+"/payment", DeletePayment)
	mux.HandleFunc("GET "+PathBase+"/payment", GetPayment)
	mux.HandleFunc("GET "+PathBase+"/payment/{id}{$}", GetPayment)
	mux.HandleFunc("GET "+PathBase+"/payment/{where}{$}", GetPayment)
}
