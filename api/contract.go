// Generated by api-gen tool. Do not edit here but edit in api/api-template.go.tmpl
package api

import (
	"fmt"
	"net/http"

	"github.com/R167/go-sets"
	ag "github.com/sunshine69/automation-go/lib"
	u "github.com/sunshine69/golang-tools/utils"
	"github.com/sunshine69/rental-management/model"
	"github.com/sunshine69/rental-management/utils"
)

func CreateContract(w http.ResponseWriter, r *http.Request) {
	if contract := ag.ParseJsonReqBodyToStruct[model.Contract](r); contract != nil {
		if err := contract.Save(); err != nil {
			fmt.Fprintf(w, `{"status": "ERROR", "msg": "%s"}`, err.Error())
		}
	} else {
		fmt.Fprint(w, `{"status": "ERROR", "msg": "Can not parse json into contract"}`)
	}
}

func UpdateContract(w http.ResponseWriter, r *http.Request) {
	o := ag.ParseJsonReqBodyToMap(r)
	if id := utils.ParseID(r); id != 0 {
		tn := model.GetContractByID(id)
		if tn == nil {
			fmt.Fprint(w, `{"status": "ERROR", "msg": "Contract not found with this id"}`)
			return
		}
		o["id"] = id
		if err := tn.Update(o); err == nil {
			fmt.Fprint(w, `{"status": "OK", "msg": "Contract updated"}`)
		} else {
			fmt.Fprint(w, `{"status": "ERROR", "msg": "`+err.Error()+`"}`)
		}
		return
	} else {
		inputSet := sets.FromMap(o)
		keySet := sets.New("property_id", "signed_date")
		if !inputSet.Superset(keySet) {
			fmt.Fprint(w, `{"status": "ERROR", "msg": "Contract no key value not provided"}`)
			return
		}
		tn := model.GetContractByCompositeKeyOrNew(o)
		if err := tn.Update(o); err == nil {
			fmt.Fprint(w, `{"status": "OK", "msg": "Contract updated"}`)
		} else {
			fmt.Fprint(w, `{"status": "ERROR", "msg": "`+err.Error()+`"}`)
		}
		return
	}
}

func DeleteContract(w http.ResponseWriter, r *http.Request) {
	if id := utils.ParseID(r); id != 0 {
		if err := model.DeleteContractByID(id); err == nil {
			fmt.Fprint(w, `{"status": "OK", "msg": "Contract deleted"}`)
		} else {
			fmt.Fprint(w, `{"status": "ERROR", "msg": `+err.Error())
		}
		return
	} else {
		contract := ag.ParseJsonReqBodyToStruct[model.Contract](r)
		if contract != nil {
			if contract.Id != 0 {
				model.DeleteContractByID(contract.Id)
				fmt.Fprint(w, `{"status": "OK", "msg": "Contract deleted"}`)
				return
			} else if contract.Property_id != 0 && contract.Signed_date != "" {
				contract.Delete()
				fmt.Fprint(w, `{"status": "OK", "msg": "Contract deleted"}`)
				return
			} else {
				fmt.Fprint(w, `{"status": "ERROR", "msg": "No composite key found"}`)
				return
			}
		} else {
			fmt.Fprint(w, `{"status": "ERROR", "msg": "Cannot parse contract"}`)
			return
		}
	}
}

func GetContract(w http.ResponseWriter, r *http.Request) {
	if id := utils.ParseID(r); id == 0 {
		if where := r.PathValue("where"); where != "" {
			o := model.Contract{Where: where}
			os := o.Search()
			fmt.Fprint(w, u.JsonDump(os, ""))
			return
		} else {
			os := []model.Contract{}
			model.DB.Select(&os, `SELECT * FROM contract ORDER BY id`)
			fmt.Fprint(w, u.JsonDump(os, ""))
			return
		}
	} else {
		o := model.GetContractByID(id)
		fmt.Fprint(w, u.JsonDump(*o, ""))
		return
	}
}

func RouteRegisterContract(mux *http.ServeMux, PathBase string) {
	mux.HandleFunc("POST "+PathBase+"/api/contract", CreateContract)
	mux.HandleFunc("PUT "+PathBase+"/api/contract/{id}", UpdateContract)
	mux.HandleFunc("PUT "+PathBase+"/api/contract", UpdateContract)
	mux.HandleFunc("DELETE "+PathBase+"/api/contract/{id}", DeleteContract)
	mux.HandleFunc("DELETE "+PathBase+"/api/contract", DeleteContract)
	mux.HandleFunc("GET "+PathBase+"/api/contract", GetContract)
	mux.HandleFunc("GET "+PathBase+"/api/contract/{id}", GetContract)
	mux.HandleFunc("GET "+PathBase+"/api/contract/q/{where}", GetContract)
}
