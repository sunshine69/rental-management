// Generated by api-gen tool. Do not edit here but edit in api/api-template.go.tmpl 
package api

import (
	"fmt"
	"net/http"

	u "github.com/sunshine69/golang-tools/utils"

	"github.com/sunshine69/rental-management/model"
)

func Create{{.typename|title}}(w http.ResponseWriter, r *http.Request) {
	{{.typename}} := ParseJSON[model.{{.typename|title}}](r)
	{{.typename}}.Save()
}

func Update{{.typename|title}}(w http.ResponseWriter, r *http.Request) {
	o := ParseJSON[model.{{.typename|title}}](r)
	if id := ParseID(r); id != 0 {
		o.Id = id
		o.Save()
		fmt.Fprint(w, `{"status": "OK", "msg": "{{.typename|title}} updated"}`)
		return
	} else {    
		if {{range $idx, $f := .uniqueFields}}o.{{$f|title}} == {{if eq (index $.uniqueFieldsMap $f) "string" }}""{{else}}0{{end}} {{if ne $idx (add ($.uniqueFields|len) -1)}} || {{end}}{{end}} {
			fmt.Fprint(w, `{"status": "ERROR", "msg": "{{.typename|title}} no key value not provided"}`)
			return
		} else {
			o.Save()
			fmt.Fprint(w, `{"status": "OK", "msg": "{{.typename|title}} updated"}`)
			return
		}
	}
}

func Delete{{.typename|title}}(w http.ResponseWriter, r *http.Request) {
	if id := ParseID(r); id != 0 {
		model.Delete{{.typename|title}}ByID(id)
		fmt.Fprint(w, `{"status": "OK", "msg": "{{.typename|title}} deleted"}`)
		return
	} else {
		{{.typename}} := ParseJSON[model.{{.typename|title}}](r)
		if {{.typename}}.Id != 0 {
			{{.typename}}.Delete()
			fmt.Fprint(w, `{"status": "OK", "msg": "{{.typename|title}} deleted"}`)
		}
	}
}

func Get{{.typename|title}}(w http.ResponseWriter, r *http.Request) {
	if id := ParseID(r); id == 0 {
		if where := r.PathValue("where"); where != "" {
			o := model.{{.typename|title}}{Where: where}
			os := o.Search()
			fmt.Fprint(w, u.JsonDump(os, ""))
			return
		} else {
			os := []model.{{.typename|title}}{}
			model.DB.Select(&os, `SELECT * FROM {{.typename}} ORDER BY id LIMIT 200`)
			fmt.Fprint(w, u.JsonDump(os, ""))
			return
		}
	} else {
		o := model.Get{{.typename|title}}ByID(id)
		fmt.Fprint(w, u.JsonDump(*o, ""))
		return
	}
}

func {{.typename|title}}RouteRegister(mux *http.ServeMux, PathBase string) {
	mux.HandleFunc("POST "+PathBase+"/{{.typename}}", Create{{.typename|title}})
	mux.HandleFunc("PUT "+PathBase+"/{{.typename}}/{id}{$}", Update{{.typename|title}})
	mux.HandleFunc("PUT "+PathBase+"/{{.typename}}", Update{{.typename|title}})
	mux.HandleFunc("DELETE "+PathBase+"/{{.typename}}/{id}{$}", Delete{{.typename|title}})
	mux.HandleFunc("DELETE "+PathBase+"/{{.typename}}", Delete{{.typename|title}})
	mux.HandleFunc("GET "+PathBase+"/{{.typename}}", Get{{.typename|title}})
	mux.HandleFunc("GET "+PathBase+"/{{.typename}}/{id}{$}", Get{{.typename|title}})
	mux.HandleFunc("GET "+PathBase+"/{{.typename}}/{where}{$}", Get{{.typename|title}})
}
