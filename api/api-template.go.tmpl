// Generated by api-gen tool. Do not edit here but edit in api/api-template.go.tmpl
package api

import (
	"fmt"
	"net/http"

	u "github.com/sunshine69/golang-tools/utils"
	ag "github.com/sunshine69/automation-go/lib"
	"github.com/R167/go-sets"
	"github.com/sunshine69/rental-management/model"
	"github.com/sunshine69/rental-management/utils"
)

func Create{{.typename|title}}(w http.ResponseWriter, r *http.Request) {
	if {{.typename}} := ag.ParseJsonReqBodyToStruct[model.{{.typename|title}}](r); {{.typename}} != nil {
		if err := {{.typename}}.Save(); err != nil {
			fmt.Fprintf(w, `{"status": "ERROR", "msg": "%s"}`, err.Error())
		}
	} else {
		fmt.Fprint(w, `{"status": "ERROR", "msg": "Can not parse json into {{.typename}}"}`)
	}
}

func Update{{.typename|title}}(w http.ResponseWriter, r *http.Request) {
	o := ag.ParseJsonReqBodyToMap(r)
	if id := utils.ParseID(r); id != 0 {
		tn := model.Get{{.typename|title}}ByID(id)
		if tn == nil {
			fmt.Fprint(w, `{"status": "ERROR", "msg": "{{.typename|title}} not found with this id"}`)
			return
		}
		o["id"] = id
		if err := tn.Update(o); err == nil {
			fmt.Fprint(w, `{"status": "OK", "msg": "{{.typename|title}} updated"}`)
		} else {
			fmt.Fprint(w, `{"status": "ERROR", "msg": "`+err.Error()+`"}`)
		}
		return
	} else {
		inputSet := sets.FromMap(o)
		keySet := sets.New({{range $idx, $f := .uniqueFields}}"{{$f}}"{{if ne $idx (add ($.uniqueFields|len) -1)}}, {{end}}{{end}})
		if !inputSet.Superset(keySet) {
			fmt.Fprint(w, `{"status": "ERROR", "msg": "{{.typename|title}} no key value not provided"}`)
			return
		}
		tn := model.Get{{.typename|title}}ByCompositeKeyOrNew(o)
		if err := tn.Update(o); err == nil {
			fmt.Fprint(w, `{"status": "OK", "msg": "{{.typename|title}} updated"}`)
		} else {
			fmt.Fprint(w, `{"status": "ERROR", "msg": "`+err.Error()+`"}`)
		}
		return
	}
}

func Delete{{.typename|title}}(w http.ResponseWriter, r *http.Request) {
	if id := utils.ParseID(r); id != 0 {
		if err := model.Delete{{.typename|title}}ByID(id); err == nil {
			fmt.Fprint(w, `{"status": "OK", "msg": "{{.typename|title}} deleted"}`)
		} else {
			fmt.Fprint(w, `{"status": "ERROR", "msg": `+err.Error())
		}
		return
	} else {
		{{.typename}} := ag.ParseJsonReqBodyToStruct[model.{{.typename|title}}](r)
		if {{.typename}} != nil {
			if {{.typename}}.Id != 0 {
				model.Delete{{.typename|title}}ByID({{.typename}}.Id)
				fmt.Fprint(w, `{"status": "OK", "msg": "{{.typename|title}} deleted"}`)
				return
			} else if {{range $idx, $f := .uniqueFields}}{{$.typename}}.{{$f|title}} != {{if eq (index $.uniqueFieldsMap $f) "string"}}""{{else}}0{{end}}  {{if ne $idx (add ($.uniqueFields|len) -1)}} && {{end}}{{end}} {
				{{.typename}}.Delete()
				fmt.Fprint(w, `{"status": "OK", "msg": "{{.typename|title}} deleted"}`)
				return
			} else {
				fmt.Fprint(w, `{"status": "ERROR", "msg": "No composite key found"}`)
				return
			}
		} else {
			fmt.Fprint(w, `{"status": "ERROR", "msg": "Cannot parse {{.typename}}"}`)
			return
		}
	}
}

func Get{{.typename|title}}(w http.ResponseWriter, r *http.Request) {
	if id := utils.ParseID(r); id == 0 {
		if where := r.PathValue("where"); where != "" {
			o := model.{{.typename|title}}{Where: where}
			os := o.Search()
			fmt.Fprint(w, u.JsonDump(os, ""))
			return
		} else {
			os := []model.{{.typename|title}}{}
			model.DB.Select(&os, `SELECT * FROM {{.typename}} ORDER BY id`)
			fmt.Fprint(w, u.JsonDump(os, ""))
			return
		}
	} else {
		o := model.Get{{.typename|title}}ByID(id)
		fmt.Fprint(w, u.JsonDump(*o, ""))
		return
	}
}

func RouteRegister{{.typename|title}}(mux *http.ServeMux, PathBase string) {
	mux.HandleFunc("POST "+PathBase+"/api/{{.typename}}", Create{{.typename|title}})
	mux.HandleFunc("PUT "+PathBase+"/api/{{.typename}}/{id}", Update{{.typename|title}})
	mux.HandleFunc("PUT "+PathBase+"/api/{{.typename}}", Update{{.typename|title}})
	mux.HandleFunc("DELETE "+PathBase+"/api/{{.typename}}/{id}", Delete{{.typename|title}})
	mux.HandleFunc("DELETE "+PathBase+"/api/{{.typename}}", Delete{{.typename|title}})
	mux.HandleFunc("GET "+PathBase+"/api/{{.typename}}", Get{{.typename|title}})
	mux.HandleFunc("GET "+PathBase+"/api/{{.typename}}/{id}", Get{{.typename|title}})
	mux.HandleFunc("GET "+PathBase+"/api/{{.typename}}/q/{where}", Get{{.typename|title}})
}
