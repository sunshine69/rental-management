// Generated by api-gen tool. Do not edit here but edit in api/api-template.go.tmpl 
package api

import (
	"fmt"
	"net/http"

	u "github.com/sunshine69/golang-tools/utils"

	"github.com/sunshine69/rental-management/model"
)

func CreateMaintenance_request(w http.ResponseWriter, r *http.Request) {
	maintenance_request := ParseJSON[model.Maintenance_request](r)
	maintenance_request.Save()
}

func UpdateMaintenance_request(w http.ResponseWriter, r *http.Request) {
	o := ParseJSON[model.Maintenance_request](r)
	if id := ParseID(r); id != 0 {
		o.Id = id
		o.Save()
		fmt.Fprint(w, `{"status": "OK", "msg": "Maintenance_request updated"}`)
		return
	} else {    
		if o.Contract_id == 0  || o.Request_date == 0  {
			fmt.Fprint(w, `{"status": "ERROR", "msg": "Maintenance_request no key value not provided"}`)
			return
		} else {
			o.Save()
			fmt.Fprint(w, `{"status": "OK", "msg": "Maintenance_request updated"}`)
			return
		}
	}
}

func DeleteMaintenance_request(w http.ResponseWriter, r *http.Request) {
	if id := ParseID(r); id != 0 {
		model.DeleteMaintenance_requestByID(id)
		fmt.Fprint(w, `{"status": "OK", "msg": "Maintenance_request deleted"}`)
		return
	} else {
		maintenance_request := ParseJSON[model.Maintenance_request](r)
		if maintenance_request.Id != 0 {
			maintenance_request.Delete()
			fmt.Fprint(w, `{"status": "OK", "msg": "Maintenance_request deleted"}`)
		}
	}
}

func GetMaintenance_request(w http.ResponseWriter, r *http.Request) {
	if id := ParseID(r); id == 0 {
		if where := r.PathValue("where"); where != "" {
			o := model.Maintenance_request{Where: where}
			os := o.Search()
			fmt.Fprint(w, u.JsonDump(os, ""))
			return
		} else {
			os := []model.Maintenance_request{}
			model.DB.Select(&os, `SELECT * FROM maintenance_request ORDER BY id LIMIT 200`)
			fmt.Fprint(w, u.JsonDump(os, ""))
			return
		}
	} else {
		o := model.GetMaintenance_requestByID(id)
		fmt.Fprint(w, u.JsonDump(*o, ""))
		return
	}
}

func Maintenance_requestRouteRegister(mux *http.ServeMux, PathBase string) {
	mux.HandleFunc("POST "+PathBase+"/maintenance_request", CreateMaintenance_request)
	mux.HandleFunc("PUT "+PathBase+"/maintenance_request/{id}{$}", UpdateMaintenance_request)
	mux.HandleFunc("PUT "+PathBase+"/maintenance_request", UpdateMaintenance_request)
	mux.HandleFunc("DELETE "+PathBase+"/maintenance_request/{id}{$}", DeleteMaintenance_request)
	mux.HandleFunc("DELETE "+PathBase+"/maintenance_request", DeleteMaintenance_request)
	mux.HandleFunc("GET "+PathBase+"/maintenance_request", GetMaintenance_request)
	mux.HandleFunc("GET "+PathBase+"/maintenance_request/{id}{$}", GetMaintenance_request)
	mux.HandleFunc("GET "+PathBase+"/maintenance_request/{where}{$}", GetMaintenance_request)
}
