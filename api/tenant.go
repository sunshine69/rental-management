// Generated by api-gen tool. Do not edit here but edit in api/api-template.go.tmpl 
package api

import (
	"fmt"
	"net/http"

	u "github.com/sunshine69/golang-tools/utils"

	"github.com/sunshine69/rental-management/model"
)

func CreateTenant(w http.ResponseWriter, r *http.Request) {
	tenant := ParseJSON[model.Tenant](r)
	tenant.Save()
}

func UpdateTenant(w http.ResponseWriter, r *http.Request) {
	o := ParseJSON[model.Tenant](r)
	if id := ParseID(r); id != 0 {
		o.Id = id
		o.Save()
		fmt.Fprint(w, `{"status": "OK", "msg": "Tenant updated"}`)
		return
	} else {    
		if o.Email == ""  {
			fmt.Fprint(w, `{"status": "ERROR", "msg": "Tenant no key value not provided"}`)
			return
		} else {
			o.Save()
			fmt.Fprint(w, `{"status": "OK", "msg": "Tenant updated"}`)
			return
		}
	}
}

func DeleteTenant(w http.ResponseWriter, r *http.Request) {
	if id := ParseID(r); id != 0 {
		model.DeleteTenantByID(id)
		fmt.Fprint(w, `{"status": "OK", "msg": "Tenant deleted"}`)
		return
	} else {
		tenant := ParseJSON[model.Tenant](r)
		if tenant.Id != 0 {
			tenant.Delete()
			fmt.Fprint(w, `{"status": "OK", "msg": "Tenant deleted"}`)
		}
	}
}

func GetTenant(w http.ResponseWriter, r *http.Request) {
	if id := ParseID(r); id == 0 {
		if where := r.PathValue("where"); where != "" {
			o := model.Tenant{Where: where}
			os := o.Search()
			fmt.Fprint(w, u.JsonDump(os, ""))
			return
		} else {
			os := []model.Tenant{}
			model.DB.Select(&os, `SELECT * FROM tenant ORDER BY id LIMIT 200`)
			fmt.Fprint(w, u.JsonDump(os, ""))
			return
		}
	} else {
		o := model.GetTenantByID(id)
		fmt.Fprint(w, u.JsonDump(*o, ""))
		return
	}
}

func TenantRouteRegister(mux *http.ServeMux, PathBase string) {
	mux.HandleFunc("POST "+PathBase+"/tenant", CreateTenant)
	mux.HandleFunc("PUT "+PathBase+"/tenant/{id}{$}", UpdateTenant)
	mux.HandleFunc("PUT "+PathBase+"/tenant", UpdateTenant)
	mux.HandleFunc("DELETE "+PathBase+"/tenant/{id}{$}", DeleteTenant)
	mux.HandleFunc("DELETE "+PathBase+"/tenant", DeleteTenant)
	mux.HandleFunc("GET "+PathBase+"/tenant", GetTenant)
	mux.HandleFunc("GET "+PathBase+"/tenant/{id}{$}", GetTenant)
	mux.HandleFunc("GET "+PathBase+"/tenant/{where}{$}", GetTenant)
}
