// Generated by model-gen tool. Do not edit but rather edit the template in utils/class-template.go.tmpl 
package model

import (
	"database/sql"
	"errors"
	"fmt"
	_ "github.com/mutecomm/go-sqlcipher/v4"
)

type Account struct {
	Balance int64 `db:"balance"`
	Contract_id int64 `db:"contract_id"`
	Id int64 `db:"id"`
	Type string `db:"type"`
	
	Where string 
}

func NewAccount(contract_id int64 ) Account {

	o := Account{}
	if err := DB.Get(&o, "SELECT * FROM account WHERE  contract_id = ?",contract_id ); errors.Is(err, sql.ErrNoRows) {		
		o.Contract_id = contract_id
		o.Save()
	}
	// get one and test if exists return as it is
	return o	
}

// Search func
func (o *Account) Search() []Account {
	output := []Account{}
	if rows, err := DB.NamedQuery(fmt.Sprintf(`SELECT * FROM account WHERE %s`, o.Where), o); err == nil {
		for rows.Next() {
			_t := Account{}
			if er := rows.StructScan(&_t); er == nil {
				output = append(output, _t)
			} else {
				fmt.Printf("[ERROR] Scan %s\n", er.Error())
				continue
			}
		}
	} else {
		fmt.Printf("[ERROR] NamedQuery %s\n", err.Error())
	}
	return output
}

// Save existing object which is saved it into db 
func (o *Account) Save() {
	if res, err := DB.NamedExec(`INSERT INTO account(balance,type,contract_id ) VALUES(:balance,:type,:contract_id ) ON CONFLICT(contract_id) DO UPDATE SET balance=excluded.balance,type=excluded.type,contract_id=excluded.contract_id`, o); err != nil {
		panic(err.Error())
	} else {
		o.Id, _ = res.LastInsertId()
	}
}
