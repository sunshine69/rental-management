// Generated by model-gen tool. Do not edit but rather edit the template in utils/class-template.go.tmpl 
package model

import (
	"database/sql"
	"errors"
	"fmt"
	"time"
	_ "github.com/mutecomm/go-sqlcipher/v4"
)

type Payment struct {
	Account_id int64 `db:"account_id"`
	Amount int64 `db:"amount"`
	Contract_id int64 `db:"contract_id"`
	Id int64 `db:"id"`
	Pay_date int64 `db:"pay_date"`
	Reference string `db:"reference"`
	
	Where string 
}

func NewPayment(account_id int64 ,pay_date int64 ) Payment {

	o := Payment{}
	if err := DB.Get(&o, "SELECT * FROM payment WHERE  account_id = ? AND  pay_date = ?",account_id ,pay_date ); errors.Is(err, sql.ErrNoRows) {		
		o.Account_id = account_id		
		o.Pay_date = pay_date
		if o.Pay_date == 0 {
			o.Pay_date = time.Now().Unix()
		}
		o.Save()
	}
	// get one and test if exists return as it is
	return o	
}

// Search func
func (o *Payment) Search() []Payment {
	output := []Payment{}
	if rows, err := DB.NamedQuery(fmt.Sprintf(`SELECT * FROM payment WHERE %s`, o.Where), o); err == nil {
		for rows.Next() {
			_t := Payment{}
			if er := rows.StructScan(&_t); er == nil {
				output = append(output, _t)
			} else {
				fmt.Printf("[ERROR] Scan %s\n", er.Error())
				continue
			}
		}
	} else {
		fmt.Printf("[ERROR] NamedQuery %s\n", err.Error())
	}
	return output
}

// Save existing object which is saved it into db 
func (o *Payment) Save() {
	if res, err := DB.NamedExec(`INSERT INTO payment(account_id,amount,pay_date,contract_id,reference ) VALUES(:account_id,:amount,:pay_date,:contract_id,:reference ) ON CONFLICT(account_id,pay_date) DO UPDATE SET account_id=excluded.account_id,amount=excluded.amount,pay_date=excluded.pay_date,contract_id=excluded.contract_id,reference=excluded.reference`, o); err != nil {
		panic(err.Error())
	} else {
		o.Id, _ = res.LastInsertId()
	}
}
