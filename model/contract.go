// Generated by model-gen tool. Do not edit but rather edit the template in utils/class-template.go.tmpl
package model

import (
	"database/sql"
	"errors"
	"fmt"
	"os"
	"strings"
	"time"

	_ "github.com/mutecomm/go-sqlcipher/v4"
	ag "github.com/sunshine69/automation-go/lib"
	u "github.com/sunshine69/golang-tools/utils"
)

type Contract struct {
	End_date            string `db:"end_date"`
	Id                  int64  `db:"id"`
	Note                string `db:"note"`
	Property_id         int64  `db:"property_id"`
	Property_manager_id int64  `db:"property_manager_id"`
	Signed_date         string `db:"signed_date"`
	Start_date          string `db:"start_date"`
	Tenant_id           int64  `db:"tenant_id"`

	Where string
}

func NewContract(property_id int64, signed_date string) Contract {

	o := Contract{}
	if err := DB.Get(&o, "SELECT * FROM contract WHERE  property_id = ? AND  signed_date = ?", property_id, signed_date); errors.Is(err, sql.ErrNoRows) {
		o.Property_id = property_id
		o.Signed_date = signed_date
		if o.Start_date == "" {
			o.Start_date = time.Now().Format(u.AUTimeLayout)
		}
		if o.End_date == 0 {
			o.End_date = time.Now().Unix()
		}
		if o.Signed_date == 0 {
			o.Signed_date = time.Now().Unix()
		}
		o.Save()
	}
	// get one and test if exists return as it is
	return o
}

func GetContractByCompositeKeyOrNew(data map[string]interface{}) *Contract {
	data = ParseDatetimeFieldOfMapData(data)
	if rows, err := DB.NamedQuery(`SELECT * FROM contract WHERE property_id=:property_id  AND signed_date=:signed_date `, data); err == nil {
		defer rows.Close()
		for rows.Next() {
			tn := Contract{}
			if err = rows.StructScan(&tn); err == nil {
				return &tn
			} else {
				fmt.Fprintf(os.Stderr, "[ERROR] GetContractByCompositeKey %s\n", err.Error())
				return nil
			}
		}
		// create new one
		tn := NewContract(data["property_id"].(int64), data["signed_date"].(string))
		tn.Update(data)
		return &tn
	} else {
		fmt.Fprintf(os.Stderr, "[ERROR] GetContractByCompositeKey %s\n", err.Error())
	}
	return nil
}

func GetContract(property_id int64, signed_date string) *Contract {
	o := Contract{
		Property_id: property_id, Signed_date: signed_date,
		Where: "property_id=:property_id , signed_date=:signed_date "}
	if r := o.Search(); len(r) > 0 {
		return &r[0]
	} else {
		return nil
	}
}

func GetContractByID(id int64) *Contract {
	o := Contract{
		Id:    id,
		Where: "id=:id"}
	if r := o.Search(); len(r) > 0 {
		return &r[0]
	} else {
		return nil
	}
}

// Search func
func (o *Contract) Search() []Contract {
	output := []Contract{}
	if rows, err := DB.NamedQuery(fmt.Sprintf(`SELECT * FROM contract WHERE %s`, o.Where), o); err == nil {
		defer rows.Close()
		for rows.Next() {
			_t := Contract{}
			if er := rows.StructScan(&_t); er == nil {
				output = append(output, _t)
			} else {
				fmt.Printf("[ERROR] Scan %s\n", er.Error())
				continue
			}
		}
	} else {
		fmt.Printf("[ERROR] NamedQuery %s\n", err.Error())
	}
	return output
}

// Save new object which is saved it into db
func (o *Contract) Update(data map[string]interface{}) error {
	fields := ag.MapKeysToSlice(data)
	fieldsWithoutKey := ag.SliceMap(fields, func(s string) *string {
		if s != "id" && s != "property_id" && s != "signed_date" {
			return &s
		}
		return nil
	})
	updateFields := ag.SliceMap(fieldsWithoutKey, func(s string) *string { s = s + " = :" + s; return &s })
	updateFieldsStr := strings.Join(updateFields, ",")

	if _, err := DB.NamedExec(`UPDATE contract SET `+updateFieldsStr, data); err != nil {
		return err
	}
	return nil
}

// Save existing object which is saved it into db
func (o *Contract) Save() error {
	if res, err := DB.NamedExec(`INSERT INTO contract(property_id,property_manager_id,tenant_id,start_date,end_date,signed_date,note ) VALUES(:property_id,:property_manager_id,:tenant_id,:start_date,:end_date,:signed_date,:note)`, o); err != nil {
		return err
	} else {
		o.Id, _ = res.LastInsertId()
	}
	return nil
}

// Delete one object
func (o *Contract) Delete() error {
	if res, err := DB.NamedExec(`DELETE FROM contract WHERE property_id=:property_id , signed_date=:signed_date `, o); err != nil {
		return err
	} else {
		r, err := res.RowsAffected()
		if err != nil {
			return err
		}
		if r == 0 {
			return fmt.Errorf("ERROR contract not found")
		}
	}
	return nil
}

func DeleteContractByID(id int64) error {
	// sqlx bug? If directly use Exec and sql is a pure string it never delete it but still return ok
	// looks like we always need to bind the named query with sqlx - can not parse pure string in
	if res, err := DB.NamedExec(`DELETE FROM contract WHERE id = :id`, map[string]interface{}{"id": id}); err != nil {
		return err
	} else {
		r, err := res.RowsAffected()
		if err != nil {
			return err
		}
		if r == 0 {
			return fmt.Errorf("ERROR contract not found")
		}
	}
	return nil
}
