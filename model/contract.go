// Generated by model-gen tool. Do not edit but rather edit the template in utils/class-template.go.tmpl 
package model

import (
	"database/sql"
	"errors"
	"fmt"
	"time"
	"time"
	"time"
	_ "github.com/mutecomm/go-sqlcipher/v4"
)

type Contract struct {
	End_date int64 `db:"end_date"`
	Id int64 `db:"id"`
	Note string `db:"note"`
	Property_id int64 `db:"property_id"`
	Property_manager_id int64 `db:"property_manager_id"`
	Signed_date int64 `db:"signed_date"`
	Start_date int64 `db:"start_date"`
	Tenant_id int64 `db:"tenant_id"`
	
	Where string 
}

func NewContract(property_id int64 ,tenant_id int64 ,signed_date int64 ) Contract {

	o := Contract{}
	if err := DB.Get(&o, "SELECT * FROM contract WHERE  property_id = ? AND  tenant_id = ? AND  signed_date = ?",property_id ,tenant_id ,signed_date ); errors.Is(err, sql.ErrNoRows) {		
		o.Property_id = property_id		
		o.Tenant_id = tenant_id		
		o.Signed_date = signed_date
		if o.Start_date == 0 {
			o.Start_date = time.Now().Unix()
		}
		if o.End_date == 0 {
			o.End_date = time.Now().Unix()
		}
		if o.Signed_date == 0 {
			o.Signed_date = time.Now().Unix()
		}
		o.Save()
	}
	// get one and test if exists return as it is
	return o	
}

// Search func
func (o *Contract) Search() []Contract {
	output := []Contract{}
	if rows, err := DB.NamedQuery(fmt.Sprintf(`SELECT * FROM contract WHERE %s`, o.Where), o); err == nil {
		for rows.Next() {
			_t := Contract{}
			if er := rows.StructScan(&_t); er == nil {
				output = append(output, _t)
			} else {
				fmt.Printf("[ERROR] Scan %s\n", er.Error())
				continue
			}
		}
	} else {
		fmt.Printf("[ERROR] NamedQuery %s\n", err.Error())
	}
	return output
}

// Save existing object which is saved it into db 
func (o *Contract) Save() {
	if res, err := DB.NamedExec(`INSERT INTO contract(property_id,property_manager_id,tenant_id,start_date,end_date,signed_date,note ) VALUES(:property_id,:property_manager_id,:tenant_id,:start_date,:end_date,:signed_date,:note ) ON CONFLICT(property_id,tenant_id,signed_date) DO UPDATE SET property_id=excluded.property_id,property_manager_id=excluded.property_manager_id,tenant_id=excluded.tenant_id,start_date=excluded.start_date,end_date=excluded.end_date,signed_date=excluded.signed_date,note=excluded.note`, o); err != nil {
		panic(err.Error())
	} else {
		o.Id, _ = res.LastInsertId()
	}
}
