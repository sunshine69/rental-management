// Generated by model-gen tool. Do not edit but rather edit the template in utils/class-template.go.tmpl 
package model

import (
	"database/sql"
	"errors"
	"fmt"
	"time"
	
	_ "github.com/mutecomm/go-sqlcipher/v4"
)

type Maintenance_request struct {
	Contract_id int64 `db:"contract_id"`
	Cost int64 `db:"cost"`
	Id int64 `db:"id"`
	Invoice_id int64 `db:"invoice_id"`
	Request_date int64 `db:"request_date"`
	Status string `db:"status"`
	Type string `db:"type"`
	
	Where string 
}

func NewMaintenance_request(contract_id int64 ,request_date int64 ) Maintenance_request {

	o := Maintenance_request{}
	if err := DB.Get(&o, "SELECT * FROM maintenance_request WHERE  contract_id = ? AND  request_date = ?",contract_id ,request_date ); errors.Is(err, sql.ErrNoRows) {		
		o.Contract_id = contract_id		
		o.Request_date = request_date
		if o.Request_date == 0 {
			o.Request_date = time.Now().Unix()
		}
		o.Save()
	}
	// get one and test if exists return as it is
	return o	
}

func GetMaintenance_request(contract_id int64, request_date int64) *Maintenance_request {
	o := Maintenance_request{
		Contract_id: contract_id , Request_date: request_date , 
		Where: "contract_id=:contract_id , request_date=:request_date "}
	if r := o.Search(); r != nil {
		return &r[0]
	} else {
		return nil
	}
}

func GetMaintenance_requestByID(id int64) *Maintenance_request {
	o := Maintenance_request{
		Id: id,
		Where: "id=:id"}
	if r := o.Search(); r != nil {
		return &r[0]
	} else {
		return nil
	}
}

// Search func
func (o *Maintenance_request) Search() []Maintenance_request {
	output := []Maintenance_request{}
	if rows, err := DB.NamedQuery(fmt.Sprintf(`SELECT * FROM maintenance_request WHERE %s`, o.Where), o); err == nil {
		for rows.Next() {
			_t := Maintenance_request{}
			if er := rows.StructScan(&_t); er == nil {
				output = append(output, _t)
			} else {
				fmt.Printf("[ERROR] Scan %s\n", er.Error())
				continue
			}
		}
	} else {
		fmt.Printf("[ERROR] NamedQuery %s\n", err.Error())
	}
	return output
}

// Save existing object which is saved it into db 
func (o *Maintenance_request) Save() {
	if res, err := DB.NamedExec(`INSERT INTO maintenance_request(request_date,type,status,cost,invoice_id,contract_id ) VALUES(:request_date,:type,:status,:cost,:invoice_id,:contract_id ) ON CONFLICT(contract_id,request_date) DO UPDATE SET request_date=excluded.request_date,type=excluded.type,status=excluded.status,cost=excluded.cost,invoice_id=excluded.invoice_id,contract_id=excluded.contract_id`, o); err != nil {
		fmt.Printf("[ERROR] %s\n", err.Error())
	} else {
		o.Id, _ = res.LastInsertId()
	}
}

// Delete one object
func (o *Maintenance_request) Delete() {
	if _, err := DB.NamedExec(`DELETE FROM maintenance_request WHERE contract_id=:contract_id AND request_date=:request_date`, o); err != nil {
		fmt.Printf("[ERROR] %s\n", err.Error())
	} else {
		o = nil
	}
}

func DeleteMaintenance_requestByID(id int64) {
	if _, err := DB.NamedExec(`DELETE FROM maintenance_request WHERE id=?`, id); err != nil {
		fmt.Printf("[ERROR] %s\n", err.Error())
	}
}