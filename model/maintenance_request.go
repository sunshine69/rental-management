// Generated by model-gen tool. Do not edit but rather edit the template in utils/class-template.go.tmpl
package model

import (
	"database/sql"
	"errors"
	"fmt"
	u "github.com/sunshine69/golang-tools/utils"
	"os"
	"strings"
	"time"

	_ "github.com/mutecomm/go-sqlcipher/v4"
	ag "github.com/sunshine69/automation-go/lib"
)

type Maintenance_request struct {
	Id           int64  `db:"id"`
	Request_date string `db:"request_date,unique"`
	Type         string `db:"type"`
	Status       string `db:"status"`
	Cost         int64  `db:"cost"`
	Invoice_id   int64  `db:"invoice_id"`
	Contract_id  int64  `db:"contract_id,unique"`
	Where        string `form:"-"`
}

func NewMaintenance_request(contract_id int64, request_date string) Maintenance_request {

	o := Maintenance_request{}
	if err := DB.Get(&o, "SELECT * FROM maintenance_request WHERE  contract_id = ? AND  request_date = ?", contract_id, request_date); errors.Is(err, sql.ErrNoRows) {
		o.Contract_id = contract_id
		o.Request_date = request_date
		if o.Request_date == "" {
			o.Request_date = time.Now().Format(u.TimeISO8601LayOut)
		}
		o.Save()
	}
	// get one and test if exists return as it is
	return o
}

func GetMaintenance_requestByCompositeKeyOrNew(data map[string]interface{}) *Maintenance_request {
	data = ParseDatetimeFieldOfMapData(data)
	if rows, err := DB.NamedQuery(`SELECT * FROM maintenance_request WHERE contract_id=:contract_id  AND request_date=:request_date `, data); err == nil {
		defer rows.Close()
		for rows.Next() {
			tn := Maintenance_request{}
			if err = rows.StructScan(&tn); err == nil {
				return &tn
			} else {
				fmt.Fprintf(os.Stderr, "[ERROR] GetMaintenance_requestByCompositeKey %s\n", err.Error())
				return nil
			}
		}
		// create new one
		tn := NewMaintenance_request(data["contract_id"].(int64), data["request_date"].(string))
		tn.Update(data)
		return &tn
	} else {
		fmt.Fprintf(os.Stderr, "[ERROR] GetMaintenance_requestByCompositeKey %s\n", err.Error())
	}
	return nil
}

func GetMaintenance_request(contract_id int64, request_date string) *Maintenance_request {
	o := Maintenance_request{
		Contract_id: contract_id, Request_date: request_date,
		Where: "contract_id=:contract_id , request_date=:request_date "}
	if r := o.Search(); len(r) > 0 {
		return &r[0]
	} else {
		return nil
	}
}

func GetMaintenance_requestByID(id int64) *Maintenance_request {
	o := Maintenance_request{
		Id:    id,
		Where: "id=:id"}
	if r := o.Search(); len(r) > 0 {
		return &r[0]
	} else {
		return nil
	}
}

// Search func
func (o *Maintenance_request) Search() []Maintenance_request {
	output := []Maintenance_request{}
	if o.Where == "" {
		o.Where = "contract_id LIKE '%" + string(o.Contract_id) + "%'  AND request_date LIKE '%" + o.Request_date + "%' "
	}
	if rows, err := DB.NamedQuery(fmt.Sprintf(`SELECT * FROM maintenance_request WHERE %s`, o.Where), o); err == nil {
		defer rows.Close()
		for rows.Next() {
			_t := Maintenance_request{}
			if er := rows.StructScan(&_t); er == nil {
				output = append(output, _t)
			} else {
				fmt.Printf("[ERROR] Scan %s\n", er.Error())
				continue
			}
		}
	} else {
		fmt.Printf("[ERROR] NamedQuery %s\n", err.Error())
	}
	return output
}

// Save new object which is saved it into db
func (o *Maintenance_request) Update(data map[string]interface{}) error {
	fields := ag.MapKeysToSlice(data)
	fieldsWithoutKey := ag.SliceMap(fields, func(s string) *string {
		if s != "id" && s != "contract_id" && s != "request_date" {
			return &s
		}
		return nil
	})
	updateFields := ag.SliceMap(fieldsWithoutKey, func(s string) *string { s = s + " = :" + s; return &s })
	updateFieldsStr := strings.Join(updateFields, ",")

	if _, err := DB.NamedExec(`UPDATE maintenance_request SET `+updateFieldsStr, data); err != nil {
		return err
	}
	return nil
}

// Save existing object which is saved it into db
func (o *Maintenance_request) Save() error {
	if res, err := DB.NamedExec(`INSERT INTO maintenance_request(request_date,type,status,cost,invoice_id,contract_id) VALUES(:request_date,:type,:status,:cost,:invoice_id,:contract_id) ON CONFLICT( contract_id,request_date) DO UPDATE SET request_date=excluded.request_date,type=excluded.type,status=excluded.status,cost=excluded.cost,invoice_id=excluded.invoice_id,contract_id=excluded.contract_id`, o); err != nil {
		return err
	} else {
		o.Id, _ = res.LastInsertId()
	}
	return nil
}

// Delete one object
func (o *Maintenance_request) Delete() error {
	if res, err := DB.NamedExec(`DELETE FROM maintenance_request WHERE contract_id=:contract_id , request_date=:request_date `, o); err != nil {
		return err
	} else {
		r, err := res.RowsAffected()
		if err != nil {
			return err
		}
		if r == 0 {
			return fmt.Errorf("ERROR maintenance_request not found")
		}
	}
	return nil
}

func DeleteMaintenance_requestByID(id int64) error {
	// sqlx bug? If directly use Exec and sql is a pure string it never delete it but still return ok
	// looks like we always need to bind the named query with sqlx - can not parse pure string in
	if res, err := DB.NamedExec(`DELETE FROM maintenance_request WHERE id = :id`, map[string]interface{}{"id": id}); err != nil {
		return err
	} else {
		r, err := res.RowsAffected()
		if err != nil {
			return err
		}
		if r == 0 {
			return fmt.Errorf("ERROR maintenance_request not found")
		}
	}
	return nil
}
