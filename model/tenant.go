// Generated by model-gen tool. Do not edit but rather edit the template in utils/class-template.go.tmpl 
package model

import (
	"database/sql"
	"errors"
	"fmt"
	"time"
	_ "github.com/mutecomm/go-sqlcipher/v4"
)

type Tenant struct {
	Address string `db:"address"`
	Contact_number string `db:"contact_number"`
	Email string `db:"email"`
	First_name string `db:"first_name"`
	Id int64 `db:"id"`
	Join_date int64 `db:"join_date"`
	Last_name string `db:"last_name"`
	Note string `db:"note"`
	
	Where string 
}

func NewTenant(email string ) Tenant {

	o := Tenant{}
	if err := DB.Get(&o, "SELECT * FROM tenant WHERE  email = ?",email ); errors.Is(err, sql.ErrNoRows) {		
		o.Email = email
		if o.Join_date == 0 {
			o.Join_date = time.Now().Unix()
		}
		o.Save()
	}
	// get one and test if exists return as it is
	return o	
}

// Search func
func (o *Tenant) Search() []Tenant {
	output := []Tenant{}
	if rows, err := DB.NamedQuery(fmt.Sprintf(`SELECT * FROM tenant WHERE %s`, o.Where), o); err == nil {
		for rows.Next() {
			_t := Tenant{}
			if er := rows.StructScan(&_t); er == nil {
				output = append(output, _t)
			} else {
				fmt.Printf("[ERROR] Scan %s\n", er.Error())
				continue
			}
		}
	} else {
		fmt.Printf("[ERROR] NamedQuery %s\n", err.Error())
	}
	return output
}

// Save existing object which is saved it into db 
func (o *Tenant) Save() {
	if res, err := DB.NamedExec(`INSERT INTO tenant(join_date,first_name,last_name,address,contact_number,email,note ) VALUES(:join_date,:first_name,:last_name,:address,:contact_number,:email,:note ) ON CONFLICT(email) DO UPDATE SET join_date=excluded.join_date,first_name=excluded.first_name,last_name=excluded.last_name,address=excluded.address,contact_number=excluded.contact_number,email=excluded.email,note=excluded.note`, o); err != nil {
		panic(err.Error())
	} else {
		o.Id, _ = res.LastInsertId()
	}
}
