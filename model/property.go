// Generated by model-gen tool. Do not edit but rather edit the template in utils/class-template.go.tmpl 
package model

import (
	"database/sql"
	"errors"
	"fmt"
	_ "github.com/mutecomm/go-sqlcipher/v4"
)

type Property struct {
	Address string `db:"address"`
	Id int64 `db:"id"`
	Name string `db:"name"`
	Note string `db:"note"`
	
	Where string 
}

func NewProperty(name string ) Property {

	o := Property{}
	if err := DB.Get(&o, "SELECT * FROM property WHERE  name = ?",name ); errors.Is(err, sql.ErrNoRows) {		
		o.Name = name
		o.Save()
	}
	// get one and test if exists return as it is
	return o	
}

func GetProperty(name string) *Property {
	o := Property{
		Name: name , 
		Where: "name=:name "}
	if r := o.Search(); r != nil {
		return &r[0]
	} else {
		return nil
	}
}

func GetPropertyByID(id int64) *Property {
	o := Property{
		Id: id,
		Where: "id=:id"}
	if r := o.Search(); r != nil {
		return &r[0]
	} else {
		return nil
	}
}

// Search func
func (o *Property) Search() []Property {
	output := []Property{}
	if rows, err := DB.NamedQuery(fmt.Sprintf(`SELECT * FROM property WHERE %s`, o.Where), o); err == nil {
		for rows.Next() {
			_t := Property{}
			if er := rows.StructScan(&_t); er == nil {
				output = append(output, _t)
			} else {
				fmt.Printf("[ERROR] Scan %s\n", er.Error())
				continue
			}
		}
	} else {
		fmt.Printf("[ERROR] NamedQuery %s\n", err.Error())
	}
	return output
}

// Save existing object which is saved it into db 
func (o *Property) Save() {
	if res, err := DB.NamedExec(`INSERT INTO property(address,name,note ) VALUES(:address,:name,:note ) ON CONFLICT(name) DO UPDATE SET address=excluded.address,name=excluded.name,note=excluded.note`, o); err != nil {
		fmt.Printf("[ERROR] %s\n", err.Error())
	} else {
		o.Id, _ = res.LastInsertId()
	}
}

// Delete one object
func (o *Property) Delete() {
	if _, err := DB.NamedExec(`DELETE FROM property WHERE name=:name`, o); err != nil {
		fmt.Printf("[ERROR] %s\n", err.Error())
	} else {
		o = nil
	}
}

func DeletePropertyByID(id int64) {
	if _, err := DB.NamedExec(`DELETE FROM property WHERE id=?`, id); err != nil {
		fmt.Printf("[ERROR] %s\n", err.Error())
	}
}