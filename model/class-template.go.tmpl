// Generated by model-gen tool. Do not edit but rather edit the template in utils/class-template.go.tmpl
package model

import (
	"database/sql"
	"errors"
	"fmt"
	"os"
	"strings"
	{{- range $idx, $f := .fieldsList }}
	{{- if contains $f "date" }}
	"time"
	u "github.com/sunshine69/golang-tools/utils"
	{{break}}
	{{- end }}
	{{- end }}
	_ "github.com/mutecomm/go-sqlcipher/v4"
	ag "github.com/sunshine69/automation-go/lib"
)

type {{ .typename | title }} struct {
	{{- range $f := .fieldsList }}
	 {{ $f | title }} {{ index $.fields $f }} `db:"{{$f}}{{if index $.uniqueFieldsMap $f}},unique{{end}}"{{if eq $f "note"}} form:"Note,ele=textarea"{{end}}`
	{{- end }}
	Where string `form:"-"`
}

func New{{ .typename | title }}( {{- range $idx, $f := .uniqueFields -}}{{- $f }} {{ index $.uniqueFieldsMap $f }} {{ if ne $idx (add ($.uniqueFields|len) -1) }},{{ end }} {{- end -}} ) {{ .typename | title }} {

	o := {{ .typename | title }}{}
	if err := DB.Get(&o, "{{ .query_new }}", {{- range $idx, $f := .uniqueFields -}}{{- $f }} {{ if ne $idx (add ($.uniqueFields|len) -1) }},{{ end }} {{- end -}} ); errors.Is(err, sql.ErrNoRows) {
		{{- range $idx, $f := .uniqueFields }}
		o.{{ $f|title }} = {{ $f }}
		{{- end }}
		{{- range $idx, $f := .fieldsList }}
		{{- if contains $f "date" }}
		if o.{{ $f|title }} == "" {
			o.{{ $f|title }} = time.Now().Format(u.TimeISO8601LayOut)
		}
		{{- end }}
		{{- end }}
		o.Save()
	}
	// get one and test if exists return as it is
	return o
}

func Get{{.typename|title}}ByCompositeKeyOrNew(data map[string]interface{}) *{{.typename|title}} {
	data = ParseDatetimeFieldOfMapData(data)
	if rows, err := DB.NamedQuery(`SELECT * FROM {{.typename}} WHERE {{range $idx, $f := .uniqueFields}}{{$f}}=:{{$f}} {{if ne $idx (add ($.uniqueFields|len) -1)}} AND {{end}}{{end}}`, data); err == nil {
		defer rows.Close()
		for rows.Next() {
			tn := {{.typename|title}}{}
			if err = rows.StructScan(&tn); err == nil {
				return &tn
			} else {
				fmt.Fprintf(os.Stderr, "[ERROR] Get{{.typename|title}}ByCompositeKey %s\n", err.Error())
				return nil
			}
		}
		// create new one
		tn := New{{.typename|title}}({{range $idx, $f := .uniqueFields}}data["{{$f}}"].({{index $.uniqueFieldsMap $f}}){{if ne $idx (add ($.uniqueFields|len) -1)}}, {{end}}{{end}})
		tn.Update(data)
		return &tn
	} else {
		fmt.Fprintf(os.Stderr, "[ERROR] Get{{.typename|title}}ByCompositeKey %s\n", err.Error())
	}
	return nil
}

func Get{{.typename|title}}({{range $idx, $f := .uniqueFields}}{{$f}} {{ index $.uniqueFieldsMap $f }}{{if ne $idx (add ($.uniqueFields|len) -1)}}, {{end}}{{end}}) *{{.typename|title}} {
	o := {{.typename|title}}{
		{{range $idx, $f := .uniqueFields}}{{$f|title}}: {{$f}} {{if ne $idx (add ($.uniqueFields|len) -1)}}, {{end}}{{end}},
		Where: "{{range $idx, $f := .uniqueFields}}{{$f}}=:{{$f}} {{if ne $idx (add ($.uniqueFields|len) -1)}}, {{end}}{{end}}"}
	if r := o.Search(); len(r) > 0 {
		return &r[0]
	} else {
		return nil
	}
}

func Get{{.typename|title}}ByID(id int64) *{{.typename|title}} {
	o := {{.typename|title}}{
		Id: id,
		Where: "id=:id"}
	if r := o.Search(); len(r) > 0 {
		return &r[0]
	} else {
		return nil
	}
}

// Search func
func (o *{{.typename|title}}) Search() []{{.typename|title}} {
	output := []{{.typename|title}}{}
	if o.Where == "" {
		o.Where = "{{range $idx, $f := .uniqueStringFields}}{{$f}} LIKE '%"+o.{{$f|title}}+"%'{{if ne $idx (add ($.uniqueStringFields|len) -1)}} AND {{end}}{{end}}"
	}
	fmt.Println(o.Where)
	if rows, err := DB.NamedQuery(fmt.Sprintf(`SELECT * FROM {{.typename}} WHERE %s`, o.Where), o); err == nil {
		defer rows.Close()
		for rows.Next() {
			_t := {{.typename|title}}{}
			if er := rows.StructScan(&_t); er == nil {
				output = append(output, _t)
			} else {
				fmt.Printf("[ERROR] Scan %s\n", er.Error())
				continue
			}
		}
	} else {
		fmt.Printf("[ERROR] NamedQuery %s\n", err.Error())
	}
	return output
}

// Save new object which is saved it into db
func (o *{{.typename|title}}) Update(data map[string]interface{}) error {
	fields := ag.MapKeysToSlice(data)
	fieldsWithoutKey := ag.SliceMap(fields, func(s string) *string {
		if s != "id" && {{range $idx, $f := .uniqueFields}}s != "{{$f}}" {{if ne $idx (add ($.uniqueFields|len) -1)}} && {{end}}{{end}} {
			return &s
		}
		return nil
	})
	updateFields := ag.SliceMap(fieldsWithoutKey, func(s string) *string { s = s + " = :" + s; return &s })
	updateFieldsStr := strings.Join(updateFields, ",")

	if _, err := DB.NamedExec(`UPDATE {{.typename}} SET `+updateFieldsStr, data); err != nil {
		return err
	}
	return nil
}


// Save existing object which is saved it into db
func (o *{{.typename|title}}) Save() error {
	if res, err := DB.NamedExec(`INSERT INTO {{.typename}}({{range $idx, $f := .fieldsList}}{{if ne $f "id"}}{{$f}}{{end}}{{if ne $f "id"}}{{if ne $idx (add ($.fieldsList|len) -1)}},{{end}}{{end}}{{end}}) VALUES({{range $idx, $f := .fieldsList}}{{if ne $f "id"}}:{{$f}}{{end}}{{if ne $f "id"}}{{if ne $idx (add ($.fieldsList|len) -1)}},{{end}}{{end}}{{end}}) ON CONFLICT( {{range $idx, $f := .uniqueFields}}{{$f}}{{if ne $idx (add ($.uniqueFields|len) -1)}},{{end}}{{end}}) DO UPDATE SET {{range $idx, $f := .fieldsList}}{{if ne $f "id"}}{{$f}}=excluded.{{$f}}{{end}}{{if ne $f "id"}}{{if ne $idx (add ($.fieldsList|len) -1)}},{{end}}{{end}}{{end}}`, o); err != nil {
		return err
	} else {
		o.Id, _ = res.LastInsertId()
	}
	return nil
}

// Delete one object
func (o *{{.typename|title}}) Delete() error {
	if res, err := DB.NamedExec(`DELETE FROM {{.typename}} WHERE {{range $idx, $f := .uniqueFields}}{{$f}}=:{{$f}} {{if ne $idx (add ($.uniqueFields|len) -1)}}, {{end}}{{end}}`, o); err != nil {
		return err
	} else {
		r, err := res.RowsAffected()
		if err != nil {
			return err
		}
		if r == 0 {
			return fmt.Errorf("ERROR {{.typename}} not found")
		}
	}
	return nil
}

func Delete{{.typename|title}}ByID(id int64) error {
	// sqlx bug? If directly use Exec and sql is a pure string it never delete it but still return ok
	// looks like we always need to bind the named query with sqlx - can not parse pure string in
	if res, err := DB.NamedExec(`DELETE FROM {{.typename}} WHERE id = :id`, map[string]interface{}{"id": id}); err != nil {
		return err
	} else {
		r, err := res.RowsAffected()
		if err != nil {
			return err
		}
		if r == 0 {
			return fmt.Errorf("ERROR {{.typename}} not found")
		}
	}
	return nil
}
