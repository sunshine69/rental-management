{{- range $objName := index . "objs" }}
func {{$objName}}StructLevelValidation(sl validator.StructLevel) {
	// Change it to suit
	/* form := sl.Current().Interface().(model.{{$objName}})
	  if form{{$objName}}.XXX != "XXX" {
		sl.ReportError(form.XXX, "XXX", "XXX", "XXX_Should_Not_Be_Set_When_XXX", "")
	} */
}
{{- end }}

// Common action for processing all forms.
func ProcessPreSteps[T any](w http.ResponseWriter, r *http.Request, currentFormType T) (T, error) {
	fmt.Fprintf(os.Stderr, "[DEBUG] Form of Type '%s'\n", reflect.TypeOf(currentFormType).Name())
	u.CheckErr(r.ParseForm(), "[ERROR] can not parse form")
	var err, err1 error
	var newT T
	err = u.CheckErrNonFatal(formDecoder.Decode(&newT, r.PostForm), "formDecoder.Decode")
	err1 = validate.Struct(newT)
	if err != nil {
		fmt.Fprintf(os.Stderr, "[ERROR] Form binding '%s'\n", err.Error())
		AllTemplate.ExecuteTemplate(w, "error.html", map[string]any{"output": "ERROR form binding please check server log"})
		return newT, err
	}
	if err1 != nil { // Check validation so any errors will come out here. Currently it would just display the validation tag string
		fmt.Fprintf(os.Stderr, "[ERROR] Form validation '%s'\n", err1.Error())
		AllTemplate.ExecuteTemplate(w, "error.html", map[string]any{
			"err":    strings.ReplaceAll(err1.Error(), "\n", "<br/>"),
			"output": "",
			"action": fmt.Sprintf(`<p>Error</p>
				<a href="%s">click here to try again</a><br>
				Exit button to quit the program
				<div class="button-group">
					<form action="/quit" method="post">
					<input type="submit" name="submit" value="Exit">
					</form>
				</div>`, "/home"),
		})
		return newT, err
	}
	return newT, nil
}

func init () {
	validate = validator.New(validator.WithRequiredStructEnabled())
	formDecoder = form.NewDecoder()

	// Register validation
	{{- range $objName := index . "objs" }}
	validate.RegisterStructValidation({{$objName}}StructLevelValidation, model.{{$objName}}{})
	{{- end }}
}